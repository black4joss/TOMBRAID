#pragma once

#include "types.h"

void DrawAnimatingItem(ITEM_INFO *item);
int32_t GetFrames(ITEM_INFO *item, int16_t *frmptr[], int32_t *rate);
void Output_DrawShadow(int16_t size, int16_t *bptr, ITEM_INFO *item);
void S_Output_DrawShadow(PHD_VBUF *vbufs, int clip, int vertex_count);
int S_GetObjectBounds(int16_t *bptr);
void CalculateObjectLighting(ITEM_INFO *item, int16_t *frame);
void Output_DrawPolygons(int16_t *obj_ptr, int clip);
void Output_DrawPolygons_I(int16_t *obj_ptr, int32_t clip);
int16_t *Output_CalcObjectVertices(int16_t *obj_ptr);
int16_t *Output_CalcVerticeLight(int16_t *obj_ptr);
int16_t *DrawObjectGT4(int16_t *obj_ptr, int32_t number);
int16_t *DrawObjectGT3(int16_t *obj_ptr, int32_t number);
int16_t *DrawObjectG4(int16_t *obj_ptr, int32_t number);
int16_t *DrawObjectG3(int16_t *obj_ptr, int32_t number);
int32_t ZedClipper(int32_t vertex_count, POINT_INFO *pts, VBUF *vertices);
int32_t ClipVertices(int32_t num, VBUF *source);
int32_t ClipVertices2(int32_t num, VBUF2 *source);
void Output_CalculateStaticLight(int16_t adder);
void Output_CalculateLight(int32_t x, int32_t y, int32_t z, int16_t room_num);
void DrawDummyItem(ITEM_INFO *item);
//void InitialiseLaraLoad(int16_t item_num);
//void ControlLaraExtra(int16_t item_num);
void DrawEvilLara(ITEM_INFO *item);
void ControlEvilLara(int16_t item_num);
void InitialiseEvilLara(int16_t item_num);
void AnimateItem(ITEM_INFO *item);
//FLOOR_INFO *GetFloor(int32_t x, int32_t y, int32_t z, int16_t *room_num);
int16_t GetHeight(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
//void ItemNewRoom(int16_t item_num, int16_t room_num);
void TestTriggers(int16_t *data, int32_t heavy);
void DrawLara(ITEM_INFO *item);
//void LavaBurn(ITEM_INFO *item);
void RefreshCamera(int16_t type, int16_t *data);
//int32_t SwitchTrigger(int16_t item_num, int16_t timer);
//int32_t KeyTrigger(int16_t item_num);
//int32_t PickupTrigger(int16_t item_num);
//void AddActiveItem(int16_t item_num);
//int32_t EnableBaddieAI(int16_t item_num, int32_t always);
void FlipMap();
void DrawHair();
void DrawGunFlash(int32_t weapon_type, int32_t clip);
//int32_t GetChange(ITEM_INFO *item, ANIM_STRUCT *anim);
void TranslateItem(ITEM_INFO *item, int32_t x, int32_t y, int32_t z);
//bool Sound_Effect(int32_t sfx_num, PHD_3DPOS *pos, uint32_t flags);
//int16_t GetDoor(FLOOR_INFO *floor);
void DrawLaraInt(ITEM_INFO *item, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);
//int16_t CreateEffect(int16_t room_num);
//void RemoveActiveItem(int16_t item_num);
//void InitialiseSlot(int16_t item_num, int32_t slot);
//void DisableBaddieAI(int16_t item_num);
void RemoveRoomFlipItems(ROOM_INFO *r);
void AddRoomFlipItems(ROOM_INFO *r);
int16_t *GetBoundsAccurate(ITEM_INFO *item);
//void ClearLOT(LOT_INFO *LOT);
//void CreateZone(ITEM_INFO *item);
//void AlterFloorHeight(ITEM_INFO *item, int32_t height);
//void CreatureCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
//int32_t TestBoundsCollide(ITEM_INFO *item, ITEM_INFO *lara_item, int32_t radius);
//int32_t TestCollision(ITEM_INFO *item, ITEM_INFO *lara_item);
//void ItemPushLara(ITEM_INFO *item, ITEM_INFO *lara_item, COLL_INFO *coll, int32_t spazon, int32_t bigpush);
int16_t *GetBestFrame(ITEM_INFO *item);
//int32_t GetSpheres(ITEM_INFO *item, SPHERE *ptr, int32_t world_space);
//void GetCollisionInfo(COLL_INFO *coll, int32_t xpos, int32_t ypos, int32_t zpos, int16_t room_num, int32_t objheight);
//void UpdateLaraRoom(ITEM_INFO *item, int32_t height);
//int16_t GetCeiling(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
//int16_t GetTiltType(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
//int32_t FindGridShift(int32_t src, int32_t dst);
//int32_t CollideStaticObjects(COLL_INFO *coll, int32_t x, int32_t y, int32_t z, int16_t room_number, int32_t hite);
//void GetNearByRooms(int32_t x, int32_t y, int32_t z, int32_t r, int32_t h, int16_t room_num);
//void GetNewRoom(int32_t x, int32_t y, int32_t z, int16_t room_num);
//int16_t GetWaterHeight(int32_t x, int32_t y, int32_t z, int16_t room_num);
int16_t *CalcRoomVertices(int16_t *obj_ptr);
//void GetJointAbsPosition(ITEM_INFO *item, PHD_VECTOR *vec, int32_t joint);
int32_t TriggerActive(ITEM_INFO *item);
//void ObjectCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
void DrawUnclippedItem(ITEM_INFO *item);
//void DoorCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
//int32_t TestLaraPosition(int16_t *bounds, ITEM_INFO *item, ITEM_INFO *lara_item);
//void AnimateLaraUntil(ITEM_INFO *lara_item, int32_t goal);
//int32_t MoveLaraPosition(PHD_VECTOR *vec, ITEM_INFO *item, ITEM_INFO *lara_item);
//int32_t Move3DPosTo3DPos(PHD_3DPOS *srcpos, PHD_3DPOS *destpos, int32_t velocity, PHD_ANGLE angadd);
void DrawPickupItem(ITEM_INFO *item);
void DrawSpriteItem(ITEM_INFO *item);
void Output_DrawScreenSprite(int32_t sx, int32_t sy, int32_t z, int32_t scale_h, int32_t scale_v, int32_t sprnum, int16_t shade, uint16_t flags);
void Output_DrawScreenSprite2D(int32_t sx, int32_t sy, int32_t z, int32_t scale_h, int32_t scale_v, int32_t sprnum, int16_t shade, uint16_t flags, int32_t page);
void Output_DrawSprite(int32_t x, int32_t y, int32_t z, int16_t sprnum, int16_t shade);
void S_Output_DrawSprite(int16_t x1, int16_t y1, int16_t x2, int y2, int z, int sprnum, int shade);
void Output_DrawUISprite(int32_t x, int32_t y, int32_t scale, int16_t sprnum, int16_t shade);
void Output_DrawScreenBox(int32_t sx, int32_t sy, int32_t w, int32_t h);
void Output_DrawScreenFBox(int32_t sx, int32_t sy, int32_t w, int32_t h);

void Output_DrawScreenFlatQuad(int32_t sx, int32_t sy, int32_t w, int32_t h, RGB888 color, int depth);

//void AlignLaraPosition(PHD_VECTOR *vec, ITEM_INFO *item, ITEM_INFO *lara_item);
//void TrapCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
void S_AnimateTextures(int32_t ticks);
void Output_CalcWibbleTable();
void DrawEffect(int16_t fxnum);
void Output_DrawLightningSegment(int32_t x1, int32_t y1, int32_t z1, int32_t x2, int32_t y2, int32_t z2, int32_t width);
void S_Output_DrawLightningSegment(int x1, int y1, int z1, int thickness1, int x2, int y2, int z2, int thickness2);
void Output_DrawScreenLine(int32_t sx, int32_t sy, int32_t w, int32_t h, int color);
void S_Output_DrawTriangle(VBUF2 * vertices, int vert_count, int depth);
void S_Output_DrawLine(VBUF2 * vertices, int depth);
//int Compose_Colour(int inputR, int inputG, int inputB);
void Output_DrawSpriteRel(int32_t x, int32_t y, int32_t z, int16_t sprnum, int16_t shade);